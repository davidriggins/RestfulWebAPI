…or create a new repository on the command line
echo "# RestfulWebAPI" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/davidriggins/RestfulWebAPI.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/davidriggins/RestfulWebAPI.git
git branch -M main
git push -u origin main


HTTP Request
	Contains:
		Verb 	- What is the action the server needs to take
		Headers - Information about the request
		Content - An optional field (data)
		
	Example:
		Post
		Content Length: 9
		Magic API

HTTP Response
	Contains:
		Status code	- Identifies how the request was processed
		Headers		- Information about the response
		Content		- An optional field (data)
		
	Example:
		201
		Content Type: text
		Magic API
		
Request Object:
	HTTP Verbs/Actions
		Get		- Fetches/Requests resource
		Post	- Creates/inserts resource
		Put		- Updates/modifies resource
		Patch	- Updates/modifies partial resource
		Delete	- Deletes/removes resource
		
	HTTP Header (requests metadata)
		Content Type	- Content's format
		Content Length	- Size of the content
		Authorization	- Who is making the request
		Accept			- What are the accepted type(s)

	Request's Content (optional)
		HTML, CSS, XML, JSON
		Information for the request
		Blobs etc.
	
Response Object:
	Status Code: (a number that represents what was done on the server and it's results
		100-199	- Informational
		200-299	- Success
			200 - Ok
			201	- Created
			204 - No content
		300-399 - Redirection
		400-499	- Client Errors
			400	- Bad request
			404 - Not found
			409 - Conflict
		500-599	- Server Errors
			500	- Internal Server Errors

Create Project
	Select to create a new project.
	Select ASP.NET Core Web API
	Project Name: MagicVilla_VillaAPI
	Solution Name: MagicVilla
	=>Next
	Select .NET 7
	=>Create

	Delete the WeatherForecast.cs and WeatherForecastController.cs files

	Add a new class called VillaAPIController.cs in the Controllers folder
	Have it derive from : ControllerBase
		- If it were to derive from Controller, it would put in overhead for Views
	Add [ApiController] attribrute to class.
	
	Create a new folder called Models
	Add a new class called "Villa" to the Models folder.
		public int Id { get; set; }
        public string Name { get; set; }
	
	Create the following endpoint in the API Controller:
		public IEnumerable<Villa> GetVillas()
        {
            return new List<Villa>
            {
                new Villa {Id=1,Name="Pool View"},
                new Villa {Id=2,Name="Beach View"}
            };
        }
		
	Create a route for the endpoint by adding [Route("api/VillaAPI")] attribute.
	Create the action attribute [HttpGet] for the endpoint.
	
	You can automatically use the controller name in the routing endpoint:
		[Route("api/[controller]")] // Does not reccommend though
	
	
	Add these two Nuget packages for Patch support:
		Microsoft.AspNetCore.JsonPatch
		Microsoft.AspNetCore.Mvc.NewtonsoftJson
		
		In the Program.cs file, at the end of builder.Services.AddControllers(), add
			.AddNewtonsoftJson()
	
	Content Negotiation.  Only allow specific content type by adding:
		option =>
		{
			option.ReturnHttpNotAcceptable = true;
		}
	inside of AddControllers() in the Program.cs file.
	
	Allow xml content by adding:
		.AddXmlDataContractSerializerFormatters()
	to the end of the AddControllers() statement in Program.cs.
	
	
	Install Entity Framework NuGet Packages:
		Microsoft.EntityFrameworkCore.SqlServer (this will install the Core as well)
		Microsoft.EntityFrameworkCore.Tools
	
	Database Migration:
		add-migration AddVillaTable
		update-database
		
	
Serilog Logger:
	Install the following NuGet packages:
		Serilog.AspNetCore
		Serilog.Sinks.File
	
	Register it with the application by adding the following to Program.cs
		Log.Logger = new LoggerConfiguration().MinimumLevel.Debug()
			.WriteTo.File("log/villaLogs.txt", rollingInterval:RollingInterval.Day)
			.CreateLogger();
		builder.Host.UseSerilog();

Custom Logger:
	Created an Interface and class to implement a simple logger.
	Registered the logger in Program.cs:
		builder.Services.AddSingleton<ILogging, Logging>();
	Used DI to inject logging service where we wanted to use it.
	
	


davidriggins git recovery codes:

8bb46-79789 
6d696-ea909 
bf1aa-93746 
89cf1-4b8c7 
2b877-2044d 
e3289-c83f9 
5ec7f-f8994 
3fda1-0fb1e 
8576d-f25c4 
567d8-375c5 
55556-9c3e0 
60970-d20e3 
00a23-1432f 
b1e7c-33afb 
3b332-27d34 
4ddc3-f52ec